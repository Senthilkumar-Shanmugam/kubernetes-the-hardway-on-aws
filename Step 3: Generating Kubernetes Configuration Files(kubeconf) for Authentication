Generating Kubernetes Configuration Files for Authentication
=============================================================
In this lab you will generate Kubernetes configuration files, also known as kubeconfigs, which enable Kubernetes clients to locate and authenticate to the Kubernetes API Servers.

Client Authentication Configs
In this section you will generate kubeconfig files for the controller manager, kubelet, kube-proxy, and scheduler clients and
the admin user.

Kubernetes Public IP Address
Each kubeconfig requires a Kubernetes API Server to connect to. To support high availability the IP address assigned to the 
load balancer will be used. In our case it EIP of LB node 192.168.5.30

KUBERNETES_PUBLIC_ADDRESS=34.197.154.195

For kubelet kubeconfig we will do it later,

The kube-proxy Kubernetes Configuration File
==============================================
Generate a kubeconfig file for the kube-proxy service:

Note: convert files using the following
   openssl x509 -in cert.crt -out cert.pem

 1.  openssl x509 -in ca.crt -out ca.pem
 2.  openssl rsa -in kube-proxy.key -out kube-proxy-key.pem



kubectl config set-cluster kubernetes-the-hard-way \
  --certificate-authority=ca.pem \
  --embed-certs=true \
  --server=https://${KUBERNETES_PUBLIC_ADDRESS}:443 \
  --kubeconfig=kube-proxy.kubeconfig

kubectl config set-credentials system:kube-proxy \
  --client-certificate=kube-proxy.pem \
  --client-key=kube-proxy-key.pem \
  --embed-certs=true \
  --kubeconfig=kube-proxy.kubeconfig

kubectl config set-context default \
  --cluster=kubernetes-the-hard-way \
  --user=system:kube-proxy \
  --kubeconfig=kube-proxy.kubeconfig

kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

Results:

kube-proxy.kubeconfig

The kube-controller-manager Kubernetes Configuration File
=============================================================
Generate a kubeconfig file for the kube-controller-manager service:
  
openssl x509 -in kube-controller-manager.crt -out kube-controller-manager.pem
openssl rsa -in kube-controller-manager.key  -out kube-controller-manager-key.pem

kubectl config set-cluster kubernetes-the-hard-way \
  --certificate-authority=ca.pem \
  --embed-certs=true \
  --server=https://127.0.0.1:6443 \
  --kubeconfig=kube-controller-manager.kubeconfig

kubectl config set-credentials system:kube-controller-manager \
  --client-certificate=kube-controller-manager.pem \
  --client-key=kube-controller-manager-key.pem \
  --embed-certs=true \
  --kubeconfig=kube-controller-manager.kubeconfig

kubectl config set-context default \
  --cluster=kubernetes-the-hard-way \
  --user=system:kube-controller-manager \
  --kubeconfig=kube-controller-manager.kubeconfig

kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
Results:

kube-controller-manager.kubeconfig
